Kampe := Runde1 + Runde2;

Turnering := Kampe * Resultater;

Turnering ? (#.HjScore > #.UdeScore);

Resultater |+ Id,UdeScore;

Resultater |- HjScore;

(Runde1 + Runde2) |+ Id;

Spilledag [ Kamp <- Id ];

// eksempel 6

((Runde1 ? (#.HjHold="AGF"))*(Spilledag[Kamp<-Id])) |+ Dato;

// eksempel 7

(Turnering |+ UdeHold) -
((Turnering ? (#.HjScore<#.UdeScore)) |+ UdeHold);

// eksempel 8

(((Kampe * (Tips ? (#.Uge=18))) ? (#.UdeHold="AGF")) +
 ((Kampe * (Tips ? (#.Uge=18))) ? (#.HjHold="AGF"))) |+ Nr;

// eksempel 9

(+ val X = Kampe * (Tips ? (#.Uge=18))
   in ((X ? (#.HjHold="AGF"))+(X ? (#.UdeHold="AGF"))) |+ Nr
+);

// eksempel 10

FindNr := func (uge:Int, hold:Text) -> (Rel)
            (+ val X = Kampe * (Tips ? (#.Uge=uge))
               in ((X ? (#.HjHold=hold))+(X ? (#.UdeHold=hold))) |+ Nr
            +)
          end;

FindNr(18,"AGF");

FindNr(19,"Lyngby");

// eksempel 11

Strip := func (uge:Int) -> (Rel)
           ((Turnering*Tips) ? (#.Uge=uge)) |- Id,Uge
         end;


// eksempel 12

Kupon := func (ugenr:Int) -> (Rel)
           (((Strip(ugenr) ? (#.HjScore < #.UdeScore))*To) +
            ((Strip(ugenr) ? (#.HjScore = #.UdeScore))*Kryds) +
            ((Strip(ugenr) ? (#.HjScore > #.UdeScore))*Et)
           ) |- HjScore,UdeScore
         end;

Kupon(18);

Kupon2 :=
func (ugenr:Int) -> (Rel)
    (+ val Strip = 
               func (uge:Int) -> (Rel)
                   ((Turnering*Tips) ? (#.Uge=uge)) |- Id, Uge
               end
          val X = Strip(ugenr)
          val Et = 
                (X ? (#.HjScore>#.UdeScore))*rel(tup(Tegn:"1"))
          val Kryds = 
                (X ? (#.HjScore=#.UdeScore))*rel(tup(Tegn:"X"))
          val To = 
                (X ? (#.HjScore<#.UdeScore))*rel(tup(Tegn:"2"))
          in (Et + Kryds + To) |- HjScore, UdeScore
    +)
end;

// eksempel 21
foo :=
func (uge:Int, hold:Text) -> (Rel)
    (+ val X = Kampe*(Tips ? (#.Uge=uge))
         in
         if |X ? (#.HjHold=hold)| > 0 -> rel(tup(Bane:"Hjemme"))
          & true -> rel(tup(Bane:"ude"))
         fi
    +)
end



// eksempel 22
func (ugenr:Int) -> (Rel)
     (+ val Strip =
     	    func (uge:Int) -> (Rel)
	    	 ((Turnering * Tips) ? (#.Uge=uge)) |- Id,Uge
            end
	val X = Strip(ugenr)
	in !(X): (+ val H = #.HjScore
	   	    val U = #.UdeScore
		    in rel(#\HjScore\UdeScore<<
		              tup(Tegn: if U<H -> "1"
			      		 & U=H -> "X"
					 & U>H -> "2"
					fi
				 )
			  )
	         +)
     +)
end

func (aar:Text, dato:Text) -> (Text)
  if |dato|=4 -> aar++dato
   & |dato|=3 -> aar++"0"++dato
  fi
end;

func (K:Rel, hold:Text) -> (Rel)
  if has(K,HjHold) -> K ? (#.HjHold=hold)
   & true -> zero
  fi
end;

func (K:Rel, hold:Text) -> (Rel)
  if has(K,HjHold) and is-Text(K,HjHold) -> K ? (#.HjHold=hold)
   & true -> zero
  fi
end;

!(Turnering):
  (+ val H = #.HjScore
     val U = #.UdeScore
     in if H<U -> rel(tup(Id:#.Id, Hold:#.UdeHold, Points:2))
         & H=U -> rel(tup(Id:#.Id, Hold:#.UdeHold, Points:1)) +
                  rel(tup(Id:#.Id, Hold:#.HjHold, Points:1))
         & H>U -> rel(tup(Id:#.Id, Hold:#.HjHold, Points:2))
        fi
  +);

(+ val AGF = EnkeltPoints ? (#.Hold="AGF")
   val OB = EnkeltPoints ? (#.Hold="OB")
   val AaB = EnkeltPoints ? (#.Hold="AaB")
   val Lyngby = EnkeltPoints ? (#.Hold="Lyngby")
   val Brondby = EnkeltPoints ? (#.Hold="Brndby")
   val Frem = EnkeltPoints ? (#.Hold="Frem")
   in rel(tup(Hold:"AGF", Points:add(AGF,Points)) +
      rel(tup(Hold:"OB", Points:add(OB,Points)) +
      rel(tup(Hold:"AaB", Points:add(AaB,Points)) +
      rel(tup(Hold:"Lyngby", Points:add(Lyngby,Points)) +
      rel(tup(Hold:"Br",Points:add(Brndby,Points)) +
      rel(tup(Hold:"Frem", Points:add(Frem,Points))
+)